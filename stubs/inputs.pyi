from typing import Any, List

# WIN: Any
# MAC: Any
# NIX: Any
# DWORD: Any
# HANDLE: Any
# WPARAM = ctypes.wintypes.WPARAM
# LPARAM = ctypes.wintypes.WPARAM
# MSG = ctypes.wintypes.MSG
# DWORD = ctypes.c_ulong
# HANDLE = ctypes.c_void_p
# WPARAM = ctypes.c_ulonglong
# LPARAM = ctypes.c_ulonglong
# MSG = ctypes.Structure
# OLD: Any
# PERMISSIONS_ERROR_TEXT: str
# EVENT_FORMAT: Any
# EVENT_SIZE: Any

# def chunks(raw) -> Generator[Any, None, None]: ...
# def iter_unpack(raw): ...
# def convert_timeval(seconds_since_epoch): ...

# SPECIAL_DEVICES: Any
# XINPUT_MAPPING: Any
# XINPUT_DLL_NAMES: Any
# XINPUT_ERROR_DEVICE_NOT_CONNECTED: int
# XINPUT_ERROR_SUCCESS: int
# XBOX_STYLE_LED_CONTROL: Any
# DEVICE_PROPERTIES: Any
# EVENT_TYPES: Any
# SYNCHRONIZATION_EVENTS: Any
# KEYS_AND_BUTTONS: Any
# RELATIVE_AXES: Any
# ABSOLUTE_AXES: Any
# SWITCH_EVENTS: Any
# MISC_EVENTS: Any
# LEDS: Any
# LED_TYPE_CODES: Any
# AUTOREPEAT_VALUES: Any
# SOUNDS: Any
# WIN_KEYBOARD_CODES: Any
# WIN_MOUSE_CODES: Any
# WINCODES: Any
# MAC_EVENT_CODES: Any
# MAC_KEYS: Any
# FORCE_FEEDBACK: Any
# FORCE_FEEDBACK_STATUS: Any
# POWER: Any
# MAX: Any
# CURRENT: Any
# EVENT_MAP: Any
# APPKIT_KB_PATH: str
# QUARTZ_MOUSE_PATH: str
# APPKIT_MOUSE_PATH: str

# class KBDLLHookStruct(ctypes.Structure): ...
# class MSLLHookStruct(ctypes.Structure): ...
# class XinputGamepad(ctypes.Structure): ...
# class XinputState(ctypes.Structure): ...
# class XinputVibration(ctypes.Structure): ...
# class PermissionError(IOError): ...
# class UnpluggedError(RuntimeError): ...
# class NoDevicePath(RuntimeError): ...
# class UnknownEventType(IndexError): ...
class UnknownEventCode(IndexError): ...

class InputEvent:
    device: InputDevice
    timestamp: float
    code: str
    state: int
    ev_type: str
    def __init__(self, device, event_info) -> None: ...

# class BaseListener:
#     pipe: Any
#     events: Any
#     codes: Any
#     app: Any
#     timeval: Any
#     type_codes: Any
#     def __init__(self, pipe, events: Any | None = ..., codes: Any | None = ...) -> None: ...
#     def install_handle_input(self) -> None: ...
#     def uninstall_handle_input(self) -> None: ...
#     def __del__(self) -> None: ...
#     @staticmethod
#     def get_timeval(): ...
#     def update_timeval(self) -> None: ...
#     def create_event_object(self, event_type, code, value, timeval: Any | None = ...): ...
#     def write_to_pipe(self, event_list) -> None: ...
#     def emulate_wheel(self, data, direction, timeval): ...
#     def emulate_rel(self, key_code, value, timeval): ...
#     def emulate_press(self, key_code, scan_code, value, timeval): ...
#     def emulate_repeat(self, value, timeval): ...
#     def sync_marker(self, timeval): ...
#     def emulate_abs(self, x_val, y_val, timeval): ...

# class WindowsKeyboardListener(BaseListener):
#     pipe: Any
#     hooked: Any
#     pointer: Any
#     def __init__(self, pipe, codes: Any | None = ...) -> None: ...
#     @staticmethod
#     def listen() -> None: ...
#     def get_fptr(self): ...
#     def install_handle_input(self): ...
#     def uninstall_handle_input(self) -> None: ...
#     def handle_input(self, ncode, wparam, lparam): ...

# def keyboard_process(pipe) -> None: ...

# class WindowsMouseListener(BaseListener):
#     pipe: Any
#     hooked: Any
#     pointer: Any
#     mouse_codes: Any
#     def __init__(self, pipe) -> None: ...
#     @staticmethod
#     def listen() -> None: ...
#     def get_fptr(self): ...
#     def install_handle_input(self): ...
#     def uninstall_handle_input(self) -> None: ...
#     def handle_input(self, ncode, wparam, lparam): ...
#     def emulate_mouse(self, key_code, x_val, y_val, data) -> None: ...

# def mouse_process(pipe) -> None: ...

# class QuartzMouseBaseListener(BaseListener):
#     active: bool
#     events: Any
#     def __init__(self, pipe) -> None: ...
#     def handle_button(self, event, event_type) -> None: ...
#     def handle_scrollwheel(self, event) -> None: ...
#     def handle_absolute(self, event) -> None: ...
#     def handle_relative(self, event) -> None: ...
#     def handle_input(self, proxy, event_type, event, refcon) -> None: ...

# def quartz_mouse_process(pipe): ...

# class AppKitMouseBaseListener(BaseListener):
#     def __init__(self, pipe, events: Any | None = ...) -> None: ...
#     def handle_button(self, event, event_type) -> None: ...
#     def handle_absolute(self, event) -> None: ...
#     def handle_scrollwheel(self, event) -> None: ...
#     def handle_relative(self, event) -> None: ...
#     events: Any
#     def handle_input(self, event) -> None: ...

# def appkit_mouse_process(pipe): ...

# class AppKitKeyboardListener(BaseListener):
#     def __init__(self, pipe) -> None: ...
#     events: Any
#     def handle_input(self, event) -> None: ...

# def mac_keyboard_process(pipe): ...

class InputDevice:
    read_size: int
    manager: DeviceManager
    # leds: List[Any]
    name: str
    def __init__(self, manager, device_path: Any | None = ..., char_path_override: Any | None = ..., read_size: int = ...) -> None: ...
    def get_char_name(self) -> str: ...
    def get_char_device_path(self) -> str: ...
    # def __iter__(self): ...
    def read(self) -> List[InputEvent]: ...
    # def __del__(self) -> None: ...

# class Keyboard(InputDevice): ...
# class Mouse(InputDevice): ...
# class MightyMouse(Mouse): ...

# def delay_and_stop(duration, dll, device_number) -> None: ...

# class GamePad(InputDevice):
#     name: str
#     def __init__(self, manager, device_path, char_path_override: Any | None = ...) -> None: ...
#     def get_number(self): ...
#     def __iter__(self): ...
#     def create_event_object(self, event_type, code, value, timeval: Any | None = ...): ...
#     def set_vibration(self, left_motor, right_motor, duration) -> None: ...

# class OtherDevice(InputDevice): ...

# class LED:
#     manager: Any
#     path: Any
#     name: Any
#     def __init__(self, manager, path, name) -> None: ...
#     def status(self): ...
#     def max_brightness(self): ...

# class SystemLED(LED):
#     code: Any
#     device_path: Any
#     device: Any
#     def __init__(self, manager, path, name) -> None: ...
#     def on(self) -> None: ...
#     def off(self) -> None: ...

# class GamepadLED(LED):
#     code: Any
#     device: Any
#     gamepad: Any
#     def __init__(self, manager, path, name) -> None: ...

# class RawInputDeviceList(ctypes.Structure): ...

class DeviceManager:
    # codes: Any
    keyboards: List[InputDevice]
    mice: List[InputDevice]
    gamepads: List[InputDevice]
    other_devices: List[InputDevice]
    all_devices: List[InputDevice]
    # leds: Any
    # microbits: Any
    # xinput: Any
    # xinput_dll: Any
    # def __init__(self) -> None: ...
    # def __iter__(self): ...
    # def __getitem__(self, index): ...
    # def get_event_type(self, raw_type): ...
    # def get_event_string(self, evtype, code): ...
    # def get_typecode(self, name): ...
    # def detect_microbit(self) -> None: ...

# SPIN_UP_MOTOR: Any

# class MicroBitPad(GamePad):
#     microbit: Any
#     default_image: Any
#     def __init__(self, manager, device_path: Any | None = ..., char_path_override: Any | None = ...) -> None: ...
#     def set_display(self, index: Any | None = ...) -> None: ...
#     def set_vibration(self, left_motor, right_motor, duration): ...

# def microbit_process(pipe) -> None: ...

# class MicroBitListener(BaseListener):
#     active: bool
#     events: Any
#     state: Any
#     dpad: bool
#     sensitivity: int
#     microbit: Any
#     def __init__(self, pipe) -> None: ...
#     def listen(self) -> None: ...
#     def uninstall_handle_input(self) -> None: ...
#     def handle_new_events(self, events) -> None: ...
#     def handle_abs(self): ...
#     def handle_dpad(self): ...
#     def check_state(self): ...
#     def handle_input(self) -> None: ...

devices: DeviceManager

# def get_key(): ...
# def get_mouse(): ...
# def get_gamepad(): ...
