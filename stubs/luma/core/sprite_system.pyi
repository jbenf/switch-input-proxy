from collections.abc import Generator
from typing import Any

class dict_wrapper:
    def __init__(self, d) -> None: ...

class spritesheet:
    image: Any
    frames: Any
    animations: Any
    cache: Any
    def __init__(self, image, frames, animations) -> None: ...
    def __getitem__(self, frame_index): ...
    def __len__(self): ...
    def animate(self, seq_name) -> Generator[Any, None, None]: ...

class framerate_regulator:
    max_sleep_time: float
    total_transit_time: float
    called: int
    start_time: int | None
    last_time: int | None
    def __init__(self, fps: float = ...) -> None: ...
    enter_time: float
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...
    def effective_FPS(self): ...
    def average_transit_time(self): ...
